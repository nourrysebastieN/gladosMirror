digit0 = '0' | digit ;
digit = '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' ;

binary = '0' | '1' ;
octal = binary | '2' | '3' | '4' | '5' | '6' | '7' ;
hex = digit0 | 'A' | 'a' | 'B' | 'b' | 'C' | 'c' | 'D' | 'd' | 'E' | 'e' | 'F' | 'f' ;

integer = ( ('0x' | '0X'), hex, { hex } )
        | ( ('0o' | '0O'), octal, { octal } )
        | ( ('0b' | '0B'), binary, { binary } )
        | ( [ '-' ] | [ '+' ] ), ( '0' | digit, { digit0 }) ;

boolean = 'True' | 'False' ;

alpha = ? alpha character ? ;

control = '\' ,
        ( "'" (* simple quote *)
        | '"' (* quote *)
        | '\' (* slash *)
        | '/' (* backslash *)
        | 'b' (* backspace *)
        | 'f' (* formfeed *)
        | 'n' (* linefeed *)
        | 'r' (* carriage return *)
        | 't' (* tabulation *)
        | 'v' (* vertical tabulation *)
        ) ;

character = "'" , ( ? all charater except \ or control character ? | control ) , "'" ;

uppercase = ? all uppercase alpha ? ;

lowercase = ? all lowercase alpha ? ;

string = '"' , { character } , '"' ;

struct literal = typename, { expression } ;

literal = boolean | integer | character | string ;

typename = uppercase, ( alpha | "_" ) , { alpha | digit0 | "_" }  ;

name = lowercase , ( alpha | "_" ) , { alpha | digit0 | "_" }  ; 

symbol = {
        ( "!"
        | '@'
        | '#'
        | '$'
        | '%'
        | '^'
        | '&'
        | '*'
        | '-'
        | '+'
        | '='
        | '|'
        | '\\'
        | ':'
        | '<'
        | '>'
        | '/'
        | '?'
        | '~'
        ) } ;

expression = literal
                | struct literal
                | name
                | symbol
                | expression, symbol, expression
                | name, { expression }
                | '(', symbol, ')', { expression }
                | '(', expression, ')';

pattern = literal | name | '(', typename, { pattern }, ')' ;

statement = if | case | expression ;

if = 'if', expression, "then", statement, [ 'else', statement ] ;

case = 'case' , expression , '{' , { '\t' , [ { pattern , '=', expression } ] , '\n' } , '}' ;

struct = 'struct', typename, name, '{', { '\t', typename, { name }, '\n' }, '}' ;

parameters = typename , [ { ',', typename } ] ;

function prototype = name, '-', [ ( parameters ) , '@' ] , typename ; 

function definition = name, '{' , { '\t' , [ { pattern , '=', expression } ] , '\n' } , '}' ;

lamba function = '?' , ( name , [ { ',', name } ] ) , '{' , { '\t' , [ { pattern , '=', expression } ] , '\n' } , '}' ;

interface = 'interface' , typename , parameters , [ 'extends' , typename , parameters ] , '{' , { '\t' , function prototype , '\n' } , '}' ;

implement = 'implement' , typename , typename , '{' , { '\t' , function definition , '\n' } , '}' ;
